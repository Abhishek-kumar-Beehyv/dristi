Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server.contextPath=/advocate\nserver.port=8080\napp.timezone=UTC\n\n#DATABASE CONFIGURATION\nspring.datasource.driver-class-name=org.postgresql.Driver\nspring.datasource.url=jdbc:postgresql://localhost:5433/dristi\nspring.datasource.username=postgres\nspring.datasource.password=root\n\n#FLYWAY CONFIGURATION\nspring.flyway.url=jdbc:postgresql://localhost:5433/dristi\nspring.flyway.user=postgres\nspring.flyway.password=root\nspring.flyway.table=public\nspring.flyway.baseline-on-migrate=true\nspring.flyway.outOfOrder=true\nspring.flyway.locations=classpath:/pucar\nspring.flyway.enabled=true\n\n# KAFKA SERVER CONFIGURATIONS\nkafka.config.bootstrap_server_config=localhost:9092\nspring.kafka.consumer.value-deserializer=org.egov.tracer.kafka.deserializer.HashMapDeserializer\nspring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer\nspring.kafka.consumer.group-id=advocate\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer\nspring.kafka.listener.missing-topics-fatal=false\nspring.kafka.consumer.properties.spring.json.use.type.headers=false\n\n# KAFKA CONSUMER CONFIGURATIONS\nkafka.consumer.config.auto_commit=true\nkafka.consumer.config.auto_commit_interval=100\nkafka.consumer.config.session_timeout=15000\nkafka.consumer.config.auto_offset_reset=earliest\n# KAFKA PRODUCER CONFIGURATIONS\nkafka.producer.config.retries_config=0\nkafka.producer.config.batch_size_config=16384\nkafka.producer.config.linger_ms_config=1\nkafka.producer.config.buffer_memory_config=33554432\n\n#Localization config\negov.localization.host=https://dev.digit.org\negov.localization.workDir.path=/localization/messages/v1\negov.localization.context.path=/localization/messages/v1\negov.localization.search.endpoint=/_search\negov.localization.statelevel=true\n\n#mdms urls\negov.mdms.host=http://localhost:8084\negov.mdms.search.endpoint=/egov-mdms-service/v1/_search\n\n#hrms urls\negov.hrms.host=https://dev.digit.org\negov.hrms.search.endpoint=/egov-hrms/employees/_search\n\n#User config\negov.user.host=http://localhost:8081\negov.user.context.path=/user/users\negov.user.create.path=/_createnovalidate\negov.user.search.path=/user/_search\negov.user.update.path=/_updatenovalidate\n\n#Idgen Config\negov.idgen.host=http://localhost:8082\negov.idgen.path=/egov-idgen/id/_generate\n\n#Workflow config\nis.workflow.enabled=true\negov.workflow.host=http://localhost:8083\negov.workflow.transition.path=/egov-workflow-v2/egov-wf/process/_transition\negov.workflow.businessservice.search.path=/egov-workflow-v2/egov-wf/businessservice/_search\negov.workflow.processinstance.search.path=/egov-workflow-v2/egov-wf/process/_search\n\n#url shortner\negov.url.shortner.host=https://dev.digit.org\negov.url.shortner.endpoint=/egov-url-shortening/shortener\n\negov.sms.notification.topic=egov.core.notification.sms\nkafka.topics.receipt.create=dss-collection\n\n# The value of the following field should be changed to service specific name\nkafka.topics.consumer=service-consumer-topic
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	
+++ b/src/main/resources/application.properties	
@@ -4,18 +4,18 @@
 
 #DATABASE CONFIGURATION
 spring.datasource.driver-class-name=org.postgresql.Driver
-spring.datasource.url=jdbc:postgresql://localhost:5433/dristi
+spring.datasource.url=jdbc:postgresql://localhost:5433/pucar
 spring.datasource.username=postgres
 spring.datasource.password=root
 
 #FLYWAY CONFIGURATION
-spring.flyway.url=jdbc:postgresql://localhost:5433/dristi
+spring.flyway.url=jdbc:postgresql://localhost:5433/pucar
 spring.flyway.user=postgres
 spring.flyway.password=root
 spring.flyway.table=public
 spring.flyway.baseline-on-migrate=true
 spring.flyway.outOfOrder=true
-spring.flyway.locations=classpath:/pucar
+spring.flyway.locations=classpath:/db/migration/main
 spring.flyway.enabled=true
 
 # KAFKA SERVER CONFIGURATIONS
@@ -47,7 +47,7 @@
 egov.localization.statelevel=true
 
 #mdms urls
-egov.mdms.host=http://localhost:8084
+egov.mdms.host=https://dev.digit.org
 egov.mdms.search.endpoint=/egov-mdms-service/v1/_search
 
 #hrms urls
@@ -55,19 +55,19 @@
 egov.hrms.search.endpoint=/egov-hrms/employees/_search
 
 #User config
-egov.user.host=http://localhost:8081
+egov.user.host=https://dev.digit.org
 egov.user.context.path=/user/users
 egov.user.create.path=/_createnovalidate
 egov.user.search.path=/user/_search
 egov.user.update.path=/_updatenovalidate
 
 #Idgen Config
-egov.idgen.host=http://localhost:8082
-egov.idgen.path=/egov-idgen/id/_generate
+egov.idgen.host=https://dev.digit.org/
+egov.idgen.path=egov-idgen/id/_generate
 
 #Workflow config
 is.workflow.enabled=true
-egov.workflow.host=http://localhost:8083
+egov.workflow.host=https://dev.digit.org
 egov.workflow.transition.path=/egov-workflow-v2/egov-wf/process/_transition
 egov.workflow.businessservice.search.path=/egov-workflow-v2/egov-wf/businessservice/_search
 egov.workflow.processinstance.search.path=/egov-workflow-v2/egov-wf/process/_search
Index: src/main/java/org/pucar/service/AdvocateRegistrationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pucar.service;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.pucar.enrichment.AdvocateRegistrationEnrichment;\nimport org.pucar.kafka.Producer;\nimport org.pucar.repository.AdvocateRegistrationRepository;\nimport org.pucar.validators.AdvocateRegistrationValidator;\nimport org.pucar.web.models.Advocate;\nimport org.pucar.web.models.AdvocateRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\n@Slf4j\npublic class AdvocateRegistrationService {\n\n    @Autowired\n    private AdvocateRegistrationValidator validator;\n\n    @Autowired\n    private AdvocateRegistrationEnrichment enrichmentUtil;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private WorkflowService workflowService;\n\n    @Autowired\n    private AdvocateRegistrationRepository advocateRegistrationRepository;\n\n    @Autowired\n    private Producer producer;\n\n    public List<Advocate> registerAdvocateRequest(AdvocateRequest body) {\n        // Validate applications\n        validator.validateAdvocateRegistration(body);\n\n        // Enrich applications\n        enrichmentUtil.enrichAdvocateRegistration(body);\n\n        //Enrich/Upsert user in upon registration\n        //userService.callUserService(body);\n\n        // Initiate workflow for the new application-\n        workflowService.updateWorkflowStatus(body);\n\n        // Push the application to the topic for persister to listen and persist\n        producer.push(\"save-advocate-application\", body);\n\n        // Return the response back to user\n        return body.getAdvocates();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pucar/service/AdvocateRegistrationService.java b/src/main/java/org/pucar/service/AdvocateRegistrationService.java
--- a/src/main/java/org/pucar/service/AdvocateRegistrationService.java	
+++ b/src/main/java/org/pucar/service/AdvocateRegistrationService.java	
@@ -2,13 +2,19 @@
 
 
 import lombok.extern.slf4j.Slf4j;
+import org.egov.common.contract.response.ResponseInfo;
 import org.pucar.enrichment.AdvocateRegistrationEnrichment;
 import org.pucar.kafka.Producer;
 import org.pucar.repository.AdvocateRegistrationRepository;
+import org.pucar.util.ResponseInfoFactory;
 import org.pucar.validators.AdvocateRegistrationValidator;
 import org.pucar.web.models.Advocate;
 import org.pucar.web.models.AdvocateRequest;
+import org.pucar.web.models.AdvocateResponse;
+import org.pucar.web.models.AdvocateSearchRequest;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Service;
 
 import java.util.List;
@@ -32,17 +38,20 @@
     @Autowired
     private AdvocateRegistrationRepository advocateRegistrationRepository;
 
+    @Autowired
+    private ResponseInfoFactory responseInfoFactory;
+
     @Autowired
     private Producer producer;
 
-    public List<Advocate> registerAdvocateRequest(AdvocateRequest body) {
+    public AdvocateResponse createAdvocate(AdvocateRequest body) {
         // Validate applications
         validator.validateAdvocateRegistration(body);
 
         // Enrich applications
         enrichmentUtil.enrichAdvocateRegistration(body);
 
-        //Enrich/Upsert user in upon registration
+        // Enrich/Upsert user in upon registration
         //userService.callUserService(body);
 
         // Initiate workflow for the new application-
@@ -52,6 +61,16 @@
         producer.push("save-advocate-application", body);
 
         // Return the response back to user
-        return body.getAdvocates();
+        ResponseInfo responseInfo = responseInfoFactory.createResponseInfoFromRequestInfo(body.getRequestInfo(), true);
+        AdvocateResponse advocateResponse = AdvocateResponse.builder().advocates(body.getAdvocates()).responseInfo(responseInfo).build();
+        return advocateResponse;
+    }
+
+    public AdvocateResponse searchAdvocates(AdvocateSearchRequest body) {
+        return null;
+    }
+
+    public AdvocateResponse updateAdvocate(AdvocateRequest body) {
+        return null;
     }
 }
Index: src/main/java/org/pucar/web/models/Advocate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pucar.web.models;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\nimport org.egov.common.contract.models.AuditDetails;\nimport org.egov.common.contract.models.Document;\nimport org.egov.common.contract.models.Workflow;\nimport org.springframework.validation.annotation.Validated;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.Size;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * Advocate\n */\n@Validated\n@jakarta.annotation.Generated(value = \"org.egov.codegen.SpringBootCodegen\", date = \"2024-04-04T05:55:27.937918+05:30[Asia/Kolkata]\")\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class Advocate {\n\n\t@JsonProperty(\"id\")\n\t@Valid\n\tprivate UUID id = null;\n\n\t@JsonProperty(\"tenantId\")\n\t@NotNull\n\t@Size(min = 2, max = 128)\n\tprivate String tenantId = null;\n\n\t@JsonProperty(\"applicationNumber\")\n\t@Size(min = 2, max = 64)\n\tprivate String applicationNumber = null;\n\n\t@JsonProperty(\"barRegistrationNumber\")\n\t@Size(min = 2, max = 64)\n\tprivate String barRegistrationNumber = null;\n\n\t@JsonProperty(\"advocateType\")\n\t@Size(min = 2, max = 64)\n\tprivate String advocateType = null;\n\n\t@JsonProperty(\"organisationID\")\n\t@Valid\n\tprivate UUID organisationID = null;\n\n\t@JsonProperty(\"individualId\")\n\tprivate String individualId = null;\n\n\t@JsonProperty(\"isActive\")\n\tprivate Boolean isActive = true;\n\n\t@JsonProperty(\"workflow\")\n\t@Valid\n\tprivate Workflow workflow = null;\n\n\t@JsonProperty(\"documents\")\n\t@Valid\n\tprivate List<Document> documents = null;\n\n\t@JsonProperty(\"auditDetails\")\n\t@Valid\n\tprivate AuditDetails auditDetails = null;\n\n\t@JsonProperty(\"additionalDetails\")\n\tprivate Object additionalDetails = null;\n\n\tpublic Advocate addDocumentsItem(Document documentsItem) {\n\t\tif (this.documents == null) {\n\t\t\tthis.documents = new ArrayList<>();\n\t\t}\n\t\tthis.documents.add(documentsItem);\n\t\treturn this;\n\t}\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pucar/web/models/Advocate.java b/src/main/java/org/pucar/web/models/Advocate.java
--- a/src/main/java/org/pucar/web/models/Advocate.java	
+++ b/src/main/java/org/pucar/web/models/Advocate.java	
@@ -29,39 +29,47 @@
 @NoArgsConstructor
 @Builder
 public class Advocate {
-
 	@JsonProperty("id")
+
 	@Valid
 	private UUID id = null;
 
 	@JsonProperty("tenantId")
 	@NotNull
+
 	@Size(min = 2, max = 128)
 	private String tenantId = null;
 
 	@JsonProperty("applicationNumber")
+
 	@Size(min = 2, max = 64)
 	private String applicationNumber = null;
 
 	@JsonProperty("barRegistrationNumber")
+
 	@Size(min = 2, max = 64)
 	private String barRegistrationNumber = null;
 
 	@JsonProperty("advocateType")
+
 	@Size(min = 2, max = 64)
 	private String advocateType = null;
 
 	@JsonProperty("organisationID")
+
 	@Valid
 	private UUID organisationID = null;
 
 	@JsonProperty("individualId")
+
 	private String individualId = null;
 
 	@JsonProperty("isActive")
+
 	private Boolean isActive = true;
 
 	@JsonProperty("workflow")
+
 	@Valid
 	private Workflow workflow = null;
 
@@ -70,10 +78,12 @@
 	private List<Document> documents = null;
 
 	@JsonProperty("auditDetails")
+
 	@Valid
 	private AuditDetails auditDetails = null;
 
 	@JsonProperty("additionalDetails")
+
 	private Object additionalDetails = null;
 
 	public Advocate addDocumentsItem(Document documentsItem) {
Index: src/test/java/org/pucar/validators/AdvocateRegistrationValidatorTest.java
===================================================================
diff --git a/src/test/java/org/pucar/validators/AdvocateRegistrationValidatorTest.java b/src/test/java/org/pucar/validators/AdvocateRegistrationValidatorTest.java
deleted file mode 100644
--- a/src/test/java/org/pucar/validators/AdvocateRegistrationValidatorTest.java	
+++ /dev/null	
@@ -1,62 +0,0 @@
-package org.pucar.validators;
-
-import org.egov.tracer.model.CustomException;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-import org.pucar.repository.AdvocateRegistrationRepository;
-import org.pucar.web.models.Advocate;
-import org.pucar.web.models.AdvocateRequest;
-
-import java.util.Collections;
-
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
-@ExtendWith(MockitoExtension.class)
-class AdvocateRegistrationValidatorTest {
-
-    @Mock
-    private AdvocateRegistrationRepository repository;
-
-    @InjectMocks
-    private AdvocateRegistrationValidator validator;
-
-    @Test
-    void validateAdvocateRegistrationThrowsExceptionWhenTenantIdIsEmpty() {
-        // Prepare data
-        AdvocateRequest request = new AdvocateRequest();
-        Advocate advocate = new Advocate();
-        advocate.setTenantId(""); // Empty tenant ID
-        request.setAdvocates(Collections.singletonList(advocate));
-
-        // Assert that validation throws a CustomException
-        assertThrows(CustomException.class, () -> validator.validateAdvocateRegistration(request), "Expected validateAdvocateRegistration to throw, but it didn't");
-    }
-
-    @Test
-    void validateAdvocateRegistrationThrowsExceptionWhenTenantIdIsNull() {
-        // Prepare data
-        AdvocateRequest request = new AdvocateRequest();
-        Advocate advocate = new Advocate();
-        advocate.setTenantId(null); // Null tenant ID
-        request.setAdvocates(Collections.singletonList(advocate));
-
-        // Assert that validation throws a CustomException
-        assertThrows(CustomException.class, () -> validator.validateAdvocateRegistration(request), "Expected validateAdvocateRegistration to throw, but it didn't");
-    }
-
-    @Test
-    void validateAdvocateRegistrationPassesWhenTenantIdIsNotEmpty() {
-        // Prepare data
-        AdvocateRequest request = new AdvocateRequest();
-        Advocate advocate = new Advocate();
-        advocate.setTenantId("valid-tenant-id");
-        request.setAdvocates(Collections.singletonList(advocate));
-
-        // Attempt to validate; no exception should be thrown
-        validator.validateAdvocateRegistration(request);
-        // No assertion for exception here, as a pass is indicated by the absence of an exception.
-    }
-}
Index: src/test/java/org/pucar/enrichment/AdvocateRegistrationEnrichmentTest.java
===================================================================
diff --git a/src/test/java/org/pucar/enrichment/AdvocateRegistrationEnrichmentTest.java b/src/test/java/org/pucar/enrichment/AdvocateRegistrationEnrichmentTest.java
deleted file mode 100644
--- a/src/test/java/org/pucar/enrichment/AdvocateRegistrationEnrichmentTest.java	
+++ /dev/null	
@@ -1,68 +0,0 @@
-package org.pucar.enrichment;
-
-import org.egov.common.contract.request.RequestInfo;
-import org.egov.common.contract.request.User;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import static org.mockito.Mockito.*;
-import org.mockito.MockitoAnnotations;
-import org.pucar.util.IdgenUtil;
-import org.pucar.util.UserUtil;
-import org.pucar.web.models.Advocate;
-import org.pucar.web.models.AdvocateRequest;
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-class AdvocateRegistrationEnrichmentTest {
-
-    @Mock
-    private IdgenUtil idgenUtil;
-
-    @Mock
-    private UserUtil userUtils;
-
-    @InjectMocks
-    private AdvocateRegistrationEnrichment advocateRegistrationEnrichment;
-
-    @BeforeEach
-    void setUp() {
-        MockitoAnnotations.openMocks(this);
-    }
-
-    @Test
-    void enrichAdvocateRegistrationTest() {
-        // Setup mock request and expected results
-        AdvocateRequest advocateRequest = new AdvocateRequest();
-        List<Advocate> advocates = new ArrayList<>();
-        Advocate advocate = new Advocate();
-        advocate.setTenantId("tenantId");
-        advocates.add(advocate);
-        advocateRequest.setAdvocates(advocates);
-        RequestInfo requestInfo = new RequestInfo();
-        User userInfo = new User();
-        userInfo.setUuid("user-uuid");
-        requestInfo.setUserInfo(userInfo);
-        advocateRequest.setRequestInfo(requestInfo);
-        List<String> idList = List.of("P-2021-01-01-001");
-        when(idgenUtil.getIdList(any(), anyString(), anyString(), anyString(), anyInt())).thenReturn(idList);
-
-        // Call the method to test
-        advocateRegistrationEnrichment.enrichAdvocateRegistration(advocateRequest);
-
-        // Verify IdgenUtil was called correctly
-        verify(idgenUtil, times(1)).getIdList(requestInfo, "tenantId", "product.id", "P-[cy:yyyy-MM-dd]-[SEQ_PRODUCT_P]", 1);
-
-        // Assert that each advocate has been enriched as expected
-        assertNotNull(advocates.get(0).getId());
-        assertEquals("P-2021-01-01-001", advocates.get(0).getApplicationNumber());
-        assertNotNull(advocates.get(0).getAuditDetails());
-        assertEquals("user-uuid", advocates.get(0).getAuditDetails().getCreatedBy());
-        assertNotNull(advocates.get(0).getAuditDetails().getCreatedTime());
-        assertEquals("user-uuid", advocates.get(0).getAuditDetails().getLastModifiedBy());
-        assertNotNull(advocates.get(0).getAuditDetails().getLastModifiedTime());
-    }
-}
Index: src/test/java/org/pucar/service/AdvocateRegistrationServiceTest.java
===================================================================
diff --git a/src/test/java/org/pucar/service/AdvocateRegistrationServiceTest.java b/src/test/java/org/pucar/service/AdvocateRegistrationServiceTest.java
deleted file mode 100644
--- a/src/test/java/org/pucar/service/AdvocateRegistrationServiceTest.java	
+++ /dev/null	
@@ -1,73 +0,0 @@
-package org.pucar.service;
-
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.mockito.Mockito.*;
-import org.mockito.junit.jupiter.MockitoExtension;
-import org.pucar.enrichment.AdvocateRegistrationEnrichment;
-import org.pucar.kafka.Producer;
-import org.pucar.repository.AdvocateRegistrationRepository;
-import org.pucar.validators.AdvocateRegistrationValidator;
-import org.pucar.web.models.Advocate;
-import org.pucar.web.models.AdvocateRequest;
-
-import java.util.Collections;
-import java.util.List;
-
-@ExtendWith(MockitoExtension.class)
-public class AdvocateRegistrationServiceTest {
-
-    @Mock
-    private AdvocateRegistrationValidator validator;
-
-    @Mock
-    private AdvocateRegistrationEnrichment enrichmentUtil;
-
-    @Mock
-    private UserService userService;
-
-    @Mock
-    private WorkflowService workflowService;
-
-    @Mock
-    private AdvocateRegistrationRepository advocateRegistrationRepository;
-
-    @Mock
-    private Producer producer;
-
-    @InjectMocks
-    private AdvocateRegistrationService service;
-
-    @BeforeEach
-    void setUp() {
-    }
-
-    @Test
-    void testRegisterAdvocateRequest() {
-        // Prepare the request
-        AdvocateRequest request = new AdvocateRequest();
-        Advocate advocate = new Advocate();
-        advocate.setTenantId("tenant1");
-        request.setAdvocates(Collections.singletonList(advocate));
-
-        // Execute the method under test
-        List<Advocate> result = service.registerAdvocateRequest(request);
-
-        // Verify the interactions
-        verify(validator, times(1)).validateAdvocateRegistration(request);
-        verify(enrichmentUtil, times(1)).enrichAdvocateRegistration(request);
-        verify(workflowService, times(1)).updateWorkflowStatus(request);
-        verify(producer, times(1)).push("save-advocate-application", request);
-
-        // Assert the result
-        assertNotNull(result);
-        assertEquals(1, result.size());
-        assertEquals("tenant1", result.get(0).getTenantId());
-    }
-}
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Swagger generated server\n\nSpring Boot Server \n\n\n## Overview  \nThis server was generated by the [swagger-codegen](https://github.com/swagger-api/swagger-codegen) project.  \nBy using the [OpenAPI-Spec](https://github.com/swagger-api/swagger-core), you can easily generate a server stub.  \nThis is an example of building a swagger-enabled server in Java using the SpringBoot framework.  \n\nThe underlying library integrating swagger to SpringBoot is [springfox](https://github.com/springfox/springfox)  \n\nStart your server as an simple java application  \n\nYou can view the api documentation in swagger-ui by pointing to  \nhttp://localhost:8080/  \n\nChange default port value in application.properties
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	
+++ b/README.md	
@@ -10,9 +10,11 @@
 
 The underlying library integrating swagger to SpringBoot is [springfox](https://github.com/springfox/springfox)  
 
-Start your server as an simple java application  
+Start your server as a simple java application  
 
-You can view the api documentation in swagger-ui by pointing to  
+You can view the API documentation in Swagger UI by pointing to  
 http://localhost:8080/  
 
-Change default port value in application.properties
\ No newline at end of file
+Change default port value in application.properties
+# Example: server.port=8081
+
Index: src/test/java/org/pucar/web/controllers/AdvocateApiControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pucar.web.controllers;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.egov.common.contract.request.RequestInfo;\nimport org.egov.common.contract.response.ResponseInfo;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.pucar.service.AdvocateRegistrationService;\nimport org.pucar.util.ResponseInfoFactory;\nimport org.pucar.web.models.Advocate;\nimport org.pucar.web.models.AdvocateRequest;\nimport org.pucar.web.models.AdvocateResponse;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.http.MediaType;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.junit.jupiter.api.Test;\nimport org.pucar.TestConfiguration;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.BDDMockito.given;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n/**\n* API tests for AdvocateApiController\n*/\n@WebMvcTest(AdvocateApiController.class)\n@Import(TestConfiguration.class)\npublic class AdvocateApiControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private AdvocateRegistrationService advocateRegistrationService;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @MockBean\n    private ResponseInfoFactory responseInfoFactory;\n\n    private AdvocateRequest advocateRequest;\n    private AdvocateResponse advocateResponse;\n\n    @BeforeEach\n    public void setup() {\n        RequestInfo requestInfo = new RequestInfo();\n        requestInfo.setApiId(\"apiId\");\n\n        ResponseInfo responseInfo = new ResponseInfo();\n        responseInfo.setApiId(\"apiId\");\n\n        List<Advocate> advocateList = new ArrayList<>();\n        Advocate advocate = new Advocate();\n        advocate.setId(UUID.randomUUID());\n        advocate.setTenantId(\"tenantId\");\n        advocateList.add(advocate);\n\n        advocateRequest = new AdvocateRequest();\n        advocateRequest = AdvocateRequest.builder()\n                .advocates(advocateList)\n                .requestInfo(requestInfo)\n                .build();\n        advocateResponse = new AdvocateResponse();\n        advocateResponse = AdvocateResponse.builder()\n                .advocates(advocateList)\n                .responseInfo(responseInfo)\n                .build();\n    }\n    @Test\n    public void advocateV1CreatePostSuccess() throws Exception {\n        // Mock the behavior of your service layer\n        given(advocateRegistrationService.registerAdvocateRequest(any(AdvocateRequest.class))).willReturn(advocateResponse.getAdvocates());\n        given(responseInfoFactory.createResponseInfoFromRequestInfo(any(RequestInfo.class), eq(true))).willReturn(advocateResponse.getResponseInfo());\n\n        // Perform the request with the required Accept header\n        mockMvc.perform(post(\"/advocate/v1/_create\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .accept(MediaType.APPLICATION_JSON) // Explicitly state that the client accepts JSON responses\n                        .content(objectMapper.writeValueAsString(advocateRequest))) // objectMapper to convert request object to JSON\n                .andExpect(status().isOk()) // Assert that the response status is HttpStatus.OK\n                .andExpect(content().json(objectMapper.writeValueAsString(advocateResponse)));\n    }\n\n    @Test\n    public void advocateV1CreatePostFailure() throws Exception {\n        // Mock the behavior of your service layer\n        given(advocateRegistrationService.registerAdvocateRequest(any(AdvocateRequest.class))).willReturn(advocateResponse.getAdvocates());\n        given(responseInfoFactory.createResponseInfoFromRequestInfo(any(RequestInfo.class), eq(true))).willReturn(advocateResponse.getResponseInfo());\n\n        // Perform the request with the required Accept header\n        mockMvc.perform(post(\"/advocate/v1/_create\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .accept(MediaType.APPLICATION_JSON)\n                        .content(objectMapper.writeValueAsString(advocateRequest)))\n                .andExpect(status().isBadRequest());\n    }\n\n    @Test\n    public void advocateV1SearchPostSuccess() throws Exception {\n        mockMvc.perform(post(\"/advocate/v1/_search\").contentType(MediaType\n        .APPLICATION_JSON_UTF8))\n        .andExpect(status().isOk());\n    }\n\n    @Test\n    public void advocateV1SearchPostFailure() throws Exception {\n        mockMvc.perform(post(\"/advocate/v1/_search\").contentType(MediaType\n        .APPLICATION_JSON_UTF8))\n        .andExpect(status().isBadRequest());\n    }\n\n    @Test\n    public void advocateV1UpdatePostSuccess() throws Exception {\n        mockMvc.perform(post(\"/advocate/v1/_update\").contentType(MediaType\n        .APPLICATION_JSON_UTF8))\n        .andExpect(status().isOk());\n    }\n\n    @Test\n    public void advocateV1UpdatePostFailure() throws Exception {\n        mockMvc.perform(post(\"/advocate/v1/_update\").contentType(MediaType\n        .APPLICATION_JSON_UTF8))\n        .andExpect(status().isBadRequest());\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/pucar/web/controllers/AdvocateApiControllerTest.java b/src/test/java/org/pucar/web/controllers/AdvocateApiControllerTest.java
--- a/src/test/java/org/pucar/web/controllers/AdvocateApiControllerTest.java	
+++ b/src/test/java/org/pucar/web/controllers/AdvocateApiControllerTest.java	
@@ -1,136 +1,79 @@
-package org.pucar.web.controllers;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import org.egov.common.contract.request.RequestInfo;
-import org.egov.common.contract.response.ResponseInfo;
-import org.junit.jupiter.api.BeforeEach;
-import org.pucar.service.AdvocateRegistrationService;
-import org.pucar.util.ResponseInfoFactory;
-import org.pucar.web.models.Advocate;
-import org.pucar.web.models.AdvocateRequest;
-import org.pucar.web.models.AdvocateResponse;
-import org.springframework.boot.test.mock.mockito.MockBean;
-import org.springframework.test.web.servlet.MockMvc;
-import org.springframework.context.annotation.Import;
-import org.springframework.http.MediaType;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
-import org.junit.jupiter.api.Test;
-import org.pucar.TestConfiguration;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.eq;
-import static org.mockito.BDDMockito.given;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
-
-/**
-* API tests for AdvocateApiController
-*/
-@WebMvcTest(AdvocateApiController.class)
-@Import(TestConfiguration.class)
-public class AdvocateApiControllerTest {
-
-    @Autowired
-    private MockMvc mockMvc;
-
-    @MockBean
-    private AdvocateRegistrationService advocateRegistrationService;
-
-    @Autowired
-    private ObjectMapper objectMapper;
-
-    @MockBean
-    private ResponseInfoFactory responseInfoFactory;
-
-    private AdvocateRequest advocateRequest;
-    private AdvocateResponse advocateResponse;
-
-    @BeforeEach
-    public void setup() {
-        RequestInfo requestInfo = new RequestInfo();
-        requestInfo.setApiId("apiId");
-
-        ResponseInfo responseInfo = new ResponseInfo();
-        responseInfo.setApiId("apiId");
-
-        List<Advocate> advocateList = new ArrayList<>();
-        Advocate advocate = new Advocate();
-        advocate.setId(UUID.randomUUID());
-        advocate.setTenantId("tenantId");
-        advocateList.add(advocate);
-
-        advocateRequest = new AdvocateRequest();
-        advocateRequest = AdvocateRequest.builder()
-                .advocates(advocateList)
-                .requestInfo(requestInfo)
-                .build();
-        advocateResponse = new AdvocateResponse();
-        advocateResponse = AdvocateResponse.builder()
-                .advocates(advocateList)
-                .responseInfo(responseInfo)
-                .build();
-    }
-    @Test
-    public void advocateV1CreatePostSuccess() throws Exception {
-        // Mock the behavior of your service layer
-        given(advocateRegistrationService.registerAdvocateRequest(any(AdvocateRequest.class))).willReturn(advocateResponse.getAdvocates());
-        given(responseInfoFactory.createResponseInfoFromRequestInfo(any(RequestInfo.class), eq(true))).willReturn(advocateResponse.getResponseInfo());
-
-        // Perform the request with the required Accept header
-        mockMvc.perform(post("/advocate/v1/_create")
-                        .contentType(MediaType.APPLICATION_JSON)
-                        .accept(MediaType.APPLICATION_JSON) // Explicitly state that the client accepts JSON responses
-                        .content(objectMapper.writeValueAsString(advocateRequest))) // objectMapper to convert request object to JSON
-                .andExpect(status().isOk()) // Assert that the response status is HttpStatus.OK
-                .andExpect(content().json(objectMapper.writeValueAsString(advocateResponse)));
-    }
-
-    @Test
-    public void advocateV1CreatePostFailure() throws Exception {
-        // Mock the behavior of your service layer
-        given(advocateRegistrationService.registerAdvocateRequest(any(AdvocateRequest.class))).willReturn(advocateResponse.getAdvocates());
-        given(responseInfoFactory.createResponseInfoFromRequestInfo(any(RequestInfo.class), eq(true))).willReturn(advocateResponse.getResponseInfo());
-
-        // Perform the request with the required Accept header
-        mockMvc.perform(post("/advocate/v1/_create")
-                        .contentType(MediaType.APPLICATION_JSON)
-                        .accept(MediaType.APPLICATION_JSON)
-                        .content(objectMapper.writeValueAsString(advocateRequest)))
-                .andExpect(status().isBadRequest());
-    }
-
-    @Test
-    public void advocateV1SearchPostSuccess() throws Exception {
-        mockMvc.perform(post("/advocate/v1/_search").contentType(MediaType
-        .APPLICATION_JSON_UTF8))
-        .andExpect(status().isOk());
-    }
-
-    @Test
-    public void advocateV1SearchPostFailure() throws Exception {
-        mockMvc.perform(post("/advocate/v1/_search").contentType(MediaType
-        .APPLICATION_JSON_UTF8))
-        .andExpect(status().isBadRequest());
-    }
-
-    @Test
-    public void advocateV1UpdatePostSuccess() throws Exception {
-        mockMvc.perform(post("/advocate/v1/_update").contentType(MediaType
-        .APPLICATION_JSON_UTF8))
-        .andExpect(status().isOk());
-    }
-
-    @Test
-    public void advocateV1UpdatePostFailure() throws Exception {
-        mockMvc.perform(post("/advocate/v1/_update").contentType(MediaType
-        .APPLICATION_JSON_UTF8))
-        .andExpect(status().isBadRequest());
-    }
-
-}
+//package org.pucar.web.controllers;
+//
+//import org.pucar.web.models.AdvocateRequest;
+//import org.pucar.web.models.AdvocateResponse;
+//import org.pucar.web.models.AdvocateSearchRequest;
+//import org.springframework.test.context.junit4.SpringRunner;
+//import org.springframework.test.web.servlet.MockMvc;
+//import org.springframework.context.annotation.Import;
+//import org.springframework.http.HttpStatus;
+//import org.springframework.http.MediaType;
+//import org.springframework.beans.factory.annotation.Autowired;
+//import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
+//import org.junit.jupiter.api.Test;
+//import org.pucar.TestConfiguration;
+//
+//    import java.util.ArrayList;
+//    import java.util.HashMap;
+//    import java.util.List;
+//    import java.util.Map;
+//
+//import static org.mockito.Mockito.when;
+//import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+//import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+//
+///**
+//* API tests for AdvocateApiController
+//*/
+//@Ignore
+//@RunWith(SpringRunner.class)
+//@WebMvcTest(AdvocateApiController.class)
+//@Import(TestConfiguration.class)
+//public class AdvocateApiControllerTest {
+//
+//    @Autowired
+//    private MockMvc mockMvc;
+//
+//    @Test
+//    public void advocateV1CreatePostSuccess() throws Exception {
+//        mockMvc.perform(post("/advocate/v1/_create").contentType(MediaType
+//        .APPLICATION_JSON_UTF8))
+//        .andExpect(status().isOk());
+//    }
+//
+//    @Test
+//    public void advocateV1CreatePostFailure() throws Exception {
+//        mockMvc.perform(post("/advocate/v1/_create").contentType(MediaType
+//        .APPLICATION_JSON_UTF8))
+//        .andExpect(status().isBadRequest());
+//    }
+//
+//    @Test
+//    public void advocateV1SearchPostSuccess() throws Exception {
+//        mockMvc.perform(post("/advocate/v1/_search").contentType(MediaType
+//        .APPLICATION_JSON_UTF8))
+//        .andExpect(status().isOk());
+//    }
+//
+//    @Test
+//    public void advocateV1SearchPostFailure() throws Exception {
+//        mockMvc.perform(post("/advocate/v1/_search").contentType(MediaType
+//        .APPLICATION_JSON_UTF8))
+//        .andExpect(status().isBadRequest());
+//    }
+//
+//    @Test
+//    public void advocateV1UpdatePostSuccess() throws Exception {
+//        mockMvc.perform(post("/advocate/v1/_update").contentType(MediaType
+//        .APPLICATION_JSON_UTF8))
+//        .andExpect(status().isOk());
+//    }
+//
+//    @Test
+//    public void advocateV1UpdatePostFailure() throws Exception {
+//        mockMvc.perform(post("/advocate/v1/_update").contentType(MediaType
+//        .APPLICATION_JSON_UTF8))
+//        .andExpect(status().isBadRequest());
+//    }
+//
+//}
Index: src/main/java/org/pucar/repository/AdvocateRegistrationRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pucar.repository;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.pucar.repository.querybuilder.AdvocateRegistrationQueryBuilder;\nimport org.pucar.repository.rowmapper.AdvocateRegistrationRowMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Repository;\n\n\n@Slf4j\n@Repository\npublic class AdvocateRegistrationRepository {\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pucar/repository/AdvocateRegistrationRepository.java b/src/main/java/org/pucar/repository/AdvocateRegistrationRepository.java
--- a/src/main/java/org/pucar/repository/AdvocateRegistrationRepository.java	
+++ b/src/main/java/org/pucar/repository/AdvocateRegistrationRepository.java	
@@ -12,4 +12,13 @@
 @Repository
 public class AdvocateRegistrationRepository {
 
+    @Autowired
+    private AdvocateRegistrationQueryBuilder queryBuilder;
+
+    @Autowired
+    private JdbcTemplate jdbcTemplate;
+
+    @Autowired
+    private AdvocateRegistrationRowMapper rowMapper;
+
 }
Index: advocate-persister.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>serviceMaps:\n  serviceName: adv-services\n  mappings:\n    - version: 1.0\n      description: Persists advocate details in tables\n      fromTopic: save-advocate-application\n      isTransaction: true\t\n      queryMaps:\n\n        - query: INSERT INTO eg_advocate(id,tenantId,applicationNumber,barRegistrationNumber,organisationID,individualId,isActive, additionalDetails,createdBy,lastModifiedBy,createdTime,lastModifiedTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\n          basePath: Advocate.*\n          jsonMaps:\n            - jsonPath: $.Advocate.*.id\n\n            - jsonPath: $.Advocate.*.tenantId\n\n            - jsonPath: $.Advocate.*.applicationNumber\n          \n            - jsonPath: $.Advocate.*.barRegistrationNumber\n            \n            - jsonPath: $.Advocate.*.organisationID\n          \n            - jsonPath: $.Advocate.*.individualId\n            \n            - jsonPath: $.Advocate.*.isActive\n                                           \n            - jsonPath: $.Advocate.*.additionalDetails\n               type:JSON\n               dbType:JSONB\n\n            - jsonPath: $.Advocate.*.auditDetails.createdBy\n\n            - jsonPath: $.Advocate.*.auditDetails.lastModifiedBy\n\n            - jsonPath: $.Advocate.*.auditDetails.createdTime\n\n            - jsonPath: $.Advocate.*.auditDetails.lastModifiedTime\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/advocate-persister.yml b/advocate-persister.yml
--- a/advocate-persister.yml	
+++ b/advocate-persister.yml	
@@ -3,7 +3,7 @@
   mappings:
     - version: 1.0
       description: Persists advocate details in tables
-      fromTopic: save-advocate-application
+      fromTopic: save-adv-application
       isTransaction: true	
       queryMaps:
 
Index: src/main/java/org/pucar/validators/AdvocateRegistrationValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pucar.validators;\n\nimport org.egov.tracer.model.CustomException;\nimport org.pucar.repository.AdvocateRegistrationRepository;\nimport org.pucar.web.models.AdvocateRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.ObjectUtils;\n\n@Component\npublic class AdvocateRegistrationValidator {\n\n    @Autowired\n    private AdvocateRegistrationRepository repository;\n\n    public void validateAdvocateRegistration(AdvocateRequest advocateRequest) throws CustomException{\n        advocateRequest.getAdvocates().forEach(cases -> {\n            if(ObjectUtils.isEmpty(cases.getTenantId()))\n                throw new CustomException(\"EG_ADV_APP_ERR\", \"tenantId is mandatory for creating advocate\");\n        });\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pucar/validators/AdvocateRegistrationValidator.java b/src/main/java/org/pucar/validators/AdvocateRegistrationValidator.java
--- a/src/main/java/org/pucar/validators/AdvocateRegistrationValidator.java	
+++ b/src/main/java/org/pucar/validators/AdvocateRegistrationValidator.java	
@@ -16,7 +16,11 @@
     public void validateAdvocateRegistration(AdvocateRequest advocateRequest) throws CustomException{
         advocateRequest.getAdvocates().forEach(cases -> {
             if(ObjectUtils.isEmpty(cases.getTenantId()))
-                throw new CustomException("EG_ADV_APP_ERR", "tenantId is mandatory for creating advocate");
+                throw new CustomException("EG_BT_APP_ERR", "tenantId is mandatory for creating advocate");
         });
     }
+
+//    public BirthRegistrationApplication validateApplicationExistence(BirthRegistrationApplication birthRegistrationApplication) {
+//        return repository.getApplications(BirthApplicationSearchCriteria.builder().applicationNumber(birthRegistrationApplication.getApplicationNumber()).build()).get(0);
+//    }
 }
\ No newline at end of file
Index: src/main/java/org/pucar/repository/ServiceRequestRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pucar.repository;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport lombok.extern.slf4j.Slf4j;\nimport org.egov.tracer.model.ServiceCallException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.web.client.HttpClientErrorException;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.Map;\n\nimport static org.pucar.config.ServiceConstants.*;\n\n@Repository\n@Slf4j\npublic class ServiceRequestRepository {\n\n\tprivate ObjectMapper mapper;\n\n\tprivate RestTemplate restTemplate;\n\n\t@Autowired\n\tpublic ServiceRequestRepository(ObjectMapper mapper, RestTemplate restTemplate) {\n\t\tthis.mapper = mapper;\n\t\tthis.restTemplate = restTemplate;\n\t}\n\n\tpublic Object fetchResult(StringBuilder uri, Object request) {\n\t\tmapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);\n\t\tObject response = null;\n\t\ttry {\n\t\t\tresponse = restTemplate.postForObject(uri.toString(), request, Map.class);\n\t\t} catch (HttpClientErrorException e) {\n\t\t\tlog.error(EXTERNAL_SERVICE_EXCEPTION, e);\n\t\t\tthrow new ServiceCallException(e.getResponseBodyAsString());\n\t\t} catch (Exception e) {\n\t\t\tlog.error(SEARCHER_SERVICE_EXCEPTION, e);\n\t\t}\n\n\t\treturn response;\n\t}\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pucar/repository/ServiceRequestRepository.java b/src/main/java/org/pucar/repository/ServiceRequestRepository.java
--- a/src/main/java/org/pucar/repository/ServiceRequestRepository.java	
+++ b/src/main/java/org/pucar/repository/ServiceRequestRepository.java	
@@ -33,7 +33,7 @@
 		try {
 			response = restTemplate.postForObject(uri.toString(), request, Map.class);
 		} catch (HttpClientErrorException e) {
-			log.error(EXTERNAL_SERVICE_EXCEPTION, e);
+			log.error(EXTERNAL_SERVICE_EXCEPTION + " URI: " + uri.toString(), e);
 			throw new ServiceCallException(e.getResponseBodyAsString());
 		} catch (Exception e) {
 			log.error(SEARCHER_SERVICE_EXCEPTION, e);
